<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                  http://www.springframework.org/schema/beans/spring-beans.xsd
                  http://www.springframework.org/schema/mvc
                  http://www.springframework.org/schema/mvc/spring-mvc.xsd
                  http://code.alibabatech.com/schema/dubbo
                  http://code.alibabatech.com/schema/dubbo/dubbo.xsd
                  http://www.springframework.org/schema/context
                  http://www.springframework.org/schema/context/spring-context.xsd
                          http://www.springframework.org/schema/security
                          http://www.springframework.org/schema/security/spring-security.xsd">

    <!-- 授权匿名访问-->
    <security:http security="none" pattern="/js/**"></security:http>
    <security:http security="none" pattern="/css/**"></security:http>
    <security:http security="none" pattern="/login.html"></security:http>

    <!-- 开启注解方式权限控制 -->
    <security:global-method-security pre-post-annotations="enabled"></security:global-method-security>


    <!-- 授权：
        auto-config="true" 开启自动配置，有SpringSecurity提供登录页面，提供登录的url地址，退出的url地址
        use-expressions="true" 使用表达式的方式控制权限

        pattern="/**"  匹配所有资源，必须通过规定的角色和权限才能访问
        access="hasRole('ROLE_ADMIN')" 指定角色和权限
            如果use-expressions="true" ，可以使用权限表达式，access="hasRole('ROLE_ADMIN')"
            如果use-expressions="false",不可以使用权限表达式，直接access="ROLE_ADMIN"

     security:form-login 指定自定义登录表单信息
         login-page="/login.html" 指定登录页面
         username-parameter="username"  指定登录用户名称，默认值：username
         password-parameter="password"  指定登录密码，默认值:password
         login-processing-url="/login.do" 指定登录的url地址
         default-target-url="/index.html" 指定登录成功后的url地址
         authentication-failure-url="/login.html" 指定认证失败的url地址
         always-use-default-target="true" 登录成功后，总是跳转到登录成功default-target-url所设置的地址。
    -->
    <security:http auto-config="true" use-expressions="true">
        <!--<security:intercept-url pattern="/**" access="hasRole('ROLE_ADMIN')"></security:intercept-url>-->


        <!--只要认证通过就可以访问-->
        <security:intercept-url pattern="/index.html"  access="isAuthenticated()" />
        <security:intercept-url pattern="/a.html"  access="isAuthenticated()" />

        <!--拥有add权限就可以访问b.html页面-->
        <security:intercept-url pattern="/b.html"  access="hasAuthority('add')" />

        <!--拥有ROLE_ADMIN角色就可以访问c.html页面，
            注意：此处虽然写的是ADMIN角色，框架会自动加上前缀ROLE_-->
        <security:intercept-url pattern="/c.html"  access="hasRole('ROLE_ADMIN')" />

        <!--拥有ROLE_ADMIN角色就可以访问d.html页面-->
        <security:intercept-url pattern="/d.html"  access="hasRole('ABC')" />


        <security:form-login login-page="/login.html"
                             username-parameter="username"
                             password-parameter="password"
                             login-processing-url="/login.do"
                             default-target-url="/index.html"
                             authentication-failure-url="/login.html"
                             always-use-default-target="true"></security:form-login>

        <!--CSRF:防止跨站请求伪造，默认开启。禁用CSRF,禁用CsrfFilter过滤器，否则，提交请求需要提供csrf令牌值进行校验。不提供会报403,拒绝访问。-->
        <security:csrf disabled="true"></security:csrf>

        <!--
        security:logout 退出登录配置信息
        logout-url="/logout.do" 退出登录操作的url地址
        logout-success-url="/login.html"  退出成功后跳转到哪的url地址
        invalidate-session="true" 退出登录后消耗session
        -->
        <security:logout logout-url="/logout.do" logout-success-url="/login.html" invalidate-session="true"></security:logout>
    </security:http>


    <!--
        认证：
        name="admin" 认证用户名称
        authorities="ROLE_ADMIN" 认证的权限集合
        password="admin" 认证密码
    -->
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="userService">
            <!--
            <security:user-service>
                <security:user name="admin" authorities="ROLE_ADMIN" password="{noop}admin"></security:user>
            </security:user-service>
            -->

            <security:password-encoder ref="passwordEncoder"></security:password-encoder>
        </security:authentication-provider>
    </security:authentication-manager>

    <context:component-scan base-package="com.atguigu" />

    <mvc:annotation-driven />

    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>


</beans>